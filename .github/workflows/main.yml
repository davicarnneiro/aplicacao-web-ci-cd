## REPOSITORIO DE IMAGEM DOCKERHUB
name: CI/CD para DOCKERHUB e Kubernetes AWS

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  CI:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    steps:
    - name: Obtendo o código
      uses: actions/checkout@v3
    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{secrets.DOCKERHUB_USER}}
        password: ${{secrets.DOCKERHUB_PASS}}
    - name: Construção da imagem Docker worker
      uses: docker/build-push-action@v5.0.0
      with: 
        context: ./src
        file: ./src/Dockerfile
        push: true
        tags: |
          davicarneiro/application-web:${{github.run_number}}
          davicarneiro/application-web:latest
          
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.16.1
      with:
        image-ref: davicarneiro/application-web:${{github.run_number}}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: 0
        severity: UNKNOWN,CRITICAL,HIGH,MEDIUM,LOW

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  CD:
    name: Deploy no Kubernetes
    runs-on: ubuntu-latest
    needs: CI

    steps:
     - name: Checkout Código
       uses: actions/checkout@v2

     - name: Configurar as credenciais da AWS
       run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}          
  
     - name: Fazer o deploy no Kubernetes
       run: |
          aws eks --region us-west-1 update-kubeconfig --name devops-eks
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml



## REPOSITORIO DE IMAGEM ECR
# name: CI/CD para ECR e Kubernetes

# on:
#   push:
#     branches:
#       - main # Troque para a branch que deseja usar

# jobs:
#   build:
#     name: Build e Push no ECR
#     runs-on: ubuntu-latest

#     steps:
#     - name: Verificar código
#       uses: actions/checkout@v2

#     - name: Login no Amazon ECR
#       id: login-ecr
#       run: |
#         echo ${{ secrets.AWS_ACCESS_KEY_ID }} | aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login -u AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_REGION: ${{ secrets.AWS_REGION }}
#         AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

#     - name: Verificar imagem no ECR
#       id: check-ecr-image
#       run: |
#         IMAGE_NAME="latest"  # Substitua pelo nome da sua imagem
#         REGION="us-west-1"    # Substitua pela região do seu ECR

#         # Verificar se a imagem já existe no ECR
#         if aws ecr describe-images --repository-name latest --region ${{ secrets.AWS_REGION }} | grep -q "imageDigest"; then
#           echo "A imagem já existe no ECR."
#           echo "Você pode adicionar comandos adicionais aqui, se necessário."
#           exit 0  # Não interrompe o fluxo
#         else
#           echo "A imagem não existe no ECR. Continuando com a construção e envio."
#         fi
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}


#     - name: Build da imagem Docker
#       run: |
#         docker build -t web-app-repo .
#         docker tag web-app-repo:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/web-app-repo:latest
#       working-directory: ./src


#     - name: Push da imagem para o ECR
#       run: |
#         docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/web-app-repo:latest
#       working-directory: ./src

#   deploy-to-kubernetes:
#       name: Deploy no Kubernetes
#       runs-on: ubuntu-latest
#       needs: build

#       steps:
#       - name: Checkout Código
#         uses: actions/checkout@v2

#       - name: Configurar as credenciais da AWS
#         run: |
#           aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws configure set default.region ${{ secrets.AWS_REGION }}          
  
#       - name: Fazer o deploy no Kubernetes
#         run: |
#           aws eks --region us-west-1 update-kubeconfig --name devops-eks
#           kubectl apply -f ./k8s/deployment.yaml
